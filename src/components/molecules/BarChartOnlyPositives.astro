---
export interface Props {
  data: { label: string; value: number }[]
  label: string
}

const { data, label } = Astro.props

const max = Math.max.apply(
  Math,
  data.map((row) => row.value)
)

const min = Math.min.apply(
  Math,
  data.map((row) => row.value)
)

const labelsv = (max: number, min: number) => {
  const labelspos: any = []

  if (min < 0) {
    for (let index = min; index < 0; index += max / 4) {
      labelspos.push({ label: index.toLocaleString() })
    }
  }
  for (let index = 0; index <= max; index += max / 4) {
    labelspos.push({ label: index.toLocaleString() })
  }

  return labelspos.reverse()
}
---

<style>
  .bar-chart {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    height: 250px;
    width: 100%;
    max-width: 440px;
    overflow: auto;
    gap: var(--gap);
    padding: var(--padding);
    border-radius: var(--rounded);
    background-color: var(--gray-ultra-light);
  }

  .bar-container {
    height: 100%;
    flex-direction: column;
    gap: 0;
  }

  .bars-positive {
    display: flex;
    flex-direction: row;
    align-items: flex-end;
    justify-content: space-between;
    height: 100%;
    width: calc(100% - 2 * var(--padding-small));
    border-bottom: 2px var(--gray-dark) solid;
    border-left: 2px var(--gray-dark) solid;
    gap: var(--gap);
    padding: 0 var(--padding-small) 0 var(--padding-small);
  }

  .bar-positive {
    background-color: var(--spring-green);
    width: 47px;
    border-radius: var(--rounded-small) var(--rounded-small) 0 0;
  }

  .labels-h {
    width: calc(100% - 2 * var(--padding-small));
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 0 var(--padding-small) 0 var(--padding-small);
    gap: var(--gap);
  }

  .labels-h > p {
    width: calc(100% / var(--num-bars));
  }

  .labels-v {
    height: calc(100% - 16px - var(--gap));
    width: auto;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    text-align: right;
    padding: var(--padding-small) 0 var(--padding-small) 0;
  }

  .label {
    text-align: center;
    width: calc(100% / var(--num-bars));
  }

  .data-wrapper {
    height: 100%;
    display: flex;
    flex-direction: row;
    gap: var(--gap);
  }
  .data-container {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    gap: var(--gap);
  }

  .chart-label {
    margin-bottom: 10px;
    font-size: 18px;
    font-weight: bold;
  }

  /* Media query para dispositivos m√≥viles */
  @media (max-width: 767px) {
    .bar-chart {
      width: 328px;
    }
  }
</style>

<div class="bar-chart" style={`--num-bars: ${data.length};`}>
  <strong>{label}</strong>
  <div class="data-wrapper">
    <div class="labels-v">
      {
        labelsv(max, min).map((item: { label: string; value: number }) => (
          <p class="caption label-v">{item.label}</p>
        ))
      }
    </div>
    <div class="data-container">
      <div class="bar-container">
        <div class="bars-positive">
          {
            data.map((item) => (
              <div
                class="bar-positive"
                style={`height: calc(${(item.value / max) * 100}%`}
              />
            ))
          }
        </div>
      </div>
      <div class="labels-h">
        {
          data.map((item: { label: string; value: number }) => (
            <p class="caption label">{item.label}</p>
          ))
        }
      </div>
    </div>
  </div>
</div>
