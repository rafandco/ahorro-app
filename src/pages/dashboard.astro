---
import { db, eq, User, Entry } from "astro:db"
import FormButton from "../components/atoms/FormButton.astro"
import HeaderSection from "../components/organisms/HeaderSection.astro"
import Section from "../components/organisms/Section.astro"
import Layout from "../layouts/Layout.astro"
import TotalCard from "../components/atoms/TotalCard.astro"
import FloatButton from "../components/atoms/FloatButton.astro"
import BarChart from "../components/molecules/BarChartWithNegatives.astro"
import BarChartOnlyPositives from "../components/molecules/BarChartOnlyPositives.astro"
import BarChartWithNegatives from "../components/molecules/BarChartWithNegatives.astro"
import RedFormButton from "../components/atoms/RedFormButton.astro"
import SecondaryButton from "../components/atoms/SecondaryButton.astro"

// Almacenamos el usuario de la sesión actual
const user = Astro.locals.user

// En caso de no existir usuario autenticado, redireccionamos a la página de registro
if (!user) {
  return Astro.redirect("/singup")
}

// Obtenemos datos del usuario
const userData = (await db.select().from(User).where(eq(User.id, user.id))).at(
  0
)

//Obtenemos las entradas del usuario
const entries = await db.select().from(Entry).where(eq(Entry.userId, user.id))

//Función de media de ahorro
const averageSavings = (entries: any) => {
  let i
  let element = 0.0
  for (i = 0; i < entries.length; i++) {
    const savings = (entries[i].finalAmount - entries[i].initialAmount)
    element = element + savings
    
  }
  return element/i
}

//Función de media de ahorro
const totalSavings = (entries: any) => {
  let i
  let element = 0.0
  for (i = 0; i < entries.length; i++) {
    const savings = (entries[i].finalAmount - entries[i].initialAmount)
    element = element + savings
    
  }
  return element
}


// Recopilamos los datos para los gráficos
const totalChart = (entries: any) :{ label: string; value: number; }[] => {
  return entries.map((entry: any) => ({label: entry.createdAt.toLocaleDateString("Es-es"), value: entry.finalAmount}))
}
const totalChartData = totalChart(entries)

const savingsChart = (entries: any): { label: string; value: number; }[]  => {
  return entries.map((entry: any) => ({label: entry.createdAt.toLocaleDateString("Es-es"), value: entry.finalAmount - entry.initialAmount}))
}
const savingsChartData = savingsChart(entries)
---

<Layout title="Dashboard">
  <header>
    <HeaderSection id="header">
      <h1>{userData?.firstName + " " + userData?.lastName}</h1>
      <SecondaryButton href="/update-user">Perfil</SecondaryButton>
    </HeaderSection>
  </header>
  <main>
    <FloatButton href="/add-entry">Añadir entrada</FloatButton>
    {entries.length == 0 ? (<p>Aún no tienes entradas</p>) 
      : (
    <Section id="totals">
      <div class="container-horizontal">
        <TotalCard>
          <strong>Dinero total</strong>
          <p class="h2"> { new Intl.NumberFormat("Es-es", {
            style: "currency",
            currency: "EUR",
          }).format(entries[entries.length-1].finalAmount)} </p>
        </TotalCard>
        <TotalCard>
          <strong>Ahorro acumulado</strong>
          <p class="h2">{ new Intl.NumberFormat("Es-es", {
            style: "currency",
            currency: "EUR",
          }).format(totalSavings(entries))}</p>
        </TotalCard>
        <TotalCard>
          <strong>Media de ahorro</strong>
          <p class="h2">{ new Intl.NumberFormat("Es-es", {
            style: "currency",
            currency: "EUR",
          }).format(averageSavings(entries))}</p>
        </TotalCard>
      </div>
    </Section>
    <Section id="entries">
      <div class="container-horizontal">
        <table>
          <tr>
            <th>Fecha</th>
            <th>Catidad inicial</th>
            <th>Catidad final</th>
            <th>Ahorro</th>
          </tr>
          {
            entries.map((entry) => (
              <tr>
                <td>{entry.createdAt.toLocaleDateString("Es-es")}</td>
                <td>
                  {new Intl.NumberFormat("Es-es", {
                    style: "currency",
                    currency: "EUR",
                  }).format(entry.initialAmount)}
                </td>
                <td>
                  {new Intl.NumberFormat("Es-es", {
                    style: "currency",
                    currency: "EUR",
                  }).format(entry.finalAmount)}
                </td>
                <td>
                  {new Intl.NumberFormat("Es-es", {
                    style: "currency",
                    currency: "EUR",
                  }).format(entry.finalAmount - entry.initialAmount)}
                </td>
              </tr>
            ))
          }
        </table>
        <div class="container-vertical">
          <BarChartOnlyPositives data={totalChartData} label="Dinero total"></BarChartOnlyPositives>
          <BarChartWithNegatives data={savingsChartData} label="Ahorro"></BarChartWithNegatives>
        </div>
      </div>
    </Section>)
    }
  </main>
</Layout>
<style>
  .container-horizontal {
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: start;
    justify-content: center;
    gap: var(--gap);
  }

  .container-vertical {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: start;
    justify-content: center;
    gap: var(--gap);
  }

  /* Media query para dispositivos móviles */
  @media (max-width: 1024px) and (min-width: 768px) {
    div {
      flex-direction: column;
    }

     .container-horizontal {
      flex-direction: column;
      align-items: stretch;
    }
  
    .container-vertical{
      flex-direction: row;
    }
  }

  /* Media query para dispositivos móviles */
  @media (max-width: 768px) {
    div {
      flex-direction: column;
    }
    .container-horizontal {
      flex-direction: column;
      align-items: stretch;
    }
  }
</style>