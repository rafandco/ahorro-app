---
import { db, eq, User, Entry } from "astro:db"
import HeaderSection from "../components/organisms/HeaderSection.astro"
import Section from "../components/organisms/Section.astro"
import Layout from "../layouts/Layout.astro"
import TotalCard from "../components/atoms/TotalCard.astro"
import FloatButton from "../components/atoms/FloatButton.astro"
import DeleteButton from "../components/atoms/DeleteButton.astro"
import NoInputForm from "../components/molecules/NoInputForm.vue"
import BarChart from "../components/molecules/BarChart.vue"
import Button from "../components/atoms/Button.astro"


interface User {
  id: string;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
}

interface Entry {
  id: string;
  initialAmount: number;
  finalAmount: number;
  createdAt: Date;
  userId: string;

}

const user = Astro.locals.user 

// Redireccionamos si el usuario no está autenticado
if (!user) {
  return Astro.redirect("/signup")
}

/*
// <<<<<<<<<<<<<<<<<<<<<<<<< USANDO FETCH (Redundate) >>>>>>>>>>>>>>>>>>>>>>>>>
// No tiene sentido usar fetch si nuestro sistema tiene acceso a la base de datos 

// Recuperamos la cookie para enviarla en las peticiones GET a la API
const cookieHeader = Astro.cookies.get("auth_session")?.value as string

// Función para obtener datos de usuario
const getUserData = async () => {
  const response = await fetch(new URL("/api/users", Astro.url),{
    method: "GET",
    headers: {
      "Cookie": "auth_session="+cookieHeader // Envía la cookie 
    }
  })
  if (!response.ok) {
    return Astro.redirect("/signup")
  }
  return await response.json()

}

// Función para obtener entradas del usuario
const getEntries = async () => {
  const response = await fetch(new URL("/api/entries", Astro.url) ,{
    method: "GET",
    headers: {
      "Cookie": "auth_session="+cookieHeader // Envía la cookie 
    }
  })
  if (!response.ok) {
    console.error("Error al obtener las entradas")
    return {data: []}
  }
  //Deserializamos la respuesta
  const json = await response.json()
  const entries: Entry[] = json.data.map((entry: any) => ({
    id: parseInt(entry.id, 10), 
    initialAmount: parseFloat(entry.initialAmount), 
    finalAmount: parseFloat(entry.finalAmount),  
    createdAt: new Date(entry.createdAt), 
    userId: entry.userId
  }))
  return { data: entries }
}

const userData = await getUserData()
const entries = await getEntries().then(entry => entry.data)

// <<<<<<<<<<<<<<<<<<<<<<<<< USANDO FETCH (Redundate) >>>>>>>>>>>>>>>>>>>>>>>>>
*/

// <<<<<<<<<<<<<<<<<<<<<<<<< USANDO BASE DE DATOS >>>>>>>>>>>>>>>>>>>>>>>>>
// Usar llamadas a la BBDD es mejor opción ya que se evita latencia en un sistema monolítico (usaremos este enfoque en el resto del código)
// Obtenemos datos del usuario
const userData = (await db.select().from(User).where(eq(User.id, user.id))).at(0)
//Obtenemos las entradas del usuario
const entries = await db.select().from(Entry).where(eq(Entry.userId, user.id))
// <<<<<<<<<<<<<<<<<<<<<<<<< USANDO BASE DE DATOS >>>>>>>>>>>>>>>>>>>>>>>>>

// Función de media de ahorro
const averageSavings = (entries: Entry[]): number => {
  if (entries.length === 0) return 0
  let totalSavings = 0.0
  entries.forEach(entry => {
    totalSavings += entry.finalAmount - entry.initialAmount
  })
  return totalSavings / entries.length
}

// Función de ahorro total
const totalSavings = (entries: Entry[]): number => {
  let total = 0.0
  entries.forEach(entry => {
    total += entry.finalAmount - entry.initialAmount
  })
  return total
}

// Recopilamos los datos para los gráficos
const totalChart = (entries: Entry[]): { label: string; value: number }[] => {
  return entries.map(entry => ({
    label: entry.createdAt.toLocaleDateString("es-ES"),
    value: entry.finalAmount,
  }))
}

const savingsChart = (entries: Entry[]): { label: string; value: number }[] => {
  return entries.map(entry => ({
    label: entry.createdAt.toLocaleDateString("es-ES"),
    value: entry.finalAmount - entry.initialAmount,
  }))
}

const totalChartData = totalChart(entries)
const savingsChartData = savingsChart(entries);
---
<Layout title="Dashboard">
  <header>
    <HeaderSection id="header">
      <h1>{"Hola, " + (userData as User).firstName}</h1>
      <Button href="/profile" color="var(--black)" bgColor="var(--gray-light)" bgColorHover="var(--gray-medium)">Perfil</Button>
    </HeaderSection>
  </header>
  <main>
    <FloatButton href="/add-entry">Añadir entrada</FloatButton>
    {entries.length == 0 ? (<p>Aún no tienes entradas</p>) : 
      (
    <Section id="totals">
      <div class="container-horizontal">
        <TotalCard>
          <strong>Dinero total</strong>
          <p class="h2">
            {
              new Intl.NumberFormat("Es-es", {
                style: "currency",
                currency: "EUR",
              }).format(entries[entries.length - 1].finalAmount)
            }
          </p>
        </TotalCard>
        <TotalCard>
          <strong>Ahorro acumulado</strong>
          <p class="h2">
            {
              new Intl.NumberFormat("Es-es", {
                style: "currency",
                currency: "EUR",
              }).format(totalSavings(entries))
            }
          </p>
        </TotalCard>
        <TotalCard>
          <strong>Media de ahorro por mes</strong>
          <p class="h2">
            {
              new Intl.NumberFormat("Es-es", {
                style: "currency",
                currency: "EUR",
              }).format(averageSavings(entries))
            } 
          </p>
        </TotalCard>
      </div>
    </Section>
    <Section id="entries">
      <div class="container-horizontal">

        <table>
          <tr>
            <th>Fecha</th>
            <th>C. inicial</th>
            <th>C. final</th>
            <th>Ahorro</th>
            <th></th>
          </tr>
          {
            entries.map((entry) => (
              <tr>
                <td>{entry.createdAt.toLocaleDateString("Es-es")}</td>
                <td>
                  {new Intl.NumberFormat("Es-es", {
                    style: "currency",
                    currency: "EUR",
                  }).format(entry.initialAmount)}
                </td>
                <td>
                  {new Intl.NumberFormat("Es-es", {
                    style: "currency",
                    currency: "EUR",
                  }).format(entry.finalAmount)}
                </td>
                <td>
                  {new Intl.NumberFormat("Es-es", {
                    style: "currency",
                    currency: "EUR",
                  }).format(entry.finalAmount - entry.initialAmount)}
                    
                </td>
                <td>
                  <NoInputForm action="/api/entries" method="DELETE" client:load>
                    <input
                      id="entryid"
                      type="hidden"
                      name="entryid"
                      value={entry.id}
                    />
                    <DeleteButton>X</DeleteButton>
                  </NoInputForm>
                </td>
              </tr>
            ))
          }
        </table>
        
        <div class="container-vertical">
          <BarChart label="Dinero total" data={totalChartData} id="total" client:load />
          <BarChart label="Ahorro" data={savingsChartData} id="savings"  client:load />
        </div>
      </div>
    </Section>
      )}  
    
  </main>
</Layout>
<style>
  .container-horizontal {
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: start;
    justify-content: center;
    gap: var(--gap);
  }

  .table-container-horizontal {
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: start;
    justify-content: center;
    gap: var(--gap);
    border-radius: var(--rounded);
  }

  .container-vertical {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: start;
    justify-content: center;
    gap: var(--gap);
  }

  /* Media query para dispositivos móviles */
  @media (max-width: 1024px) and (min-width: 768px) {
    div {
      flex-direction: column;
    }

    .container-horizontal {
      flex-direction: column;
      align-items: stretch;
    }

    .container-vertical {
      flex-direction: row;
    }
  }

  /* Media query para dispositivos móviles */
  @media (max-width: 768px) {
    div {
      flex-direction: column;
    }
    .container-horizontal {
      flex-direction: column;
      align-items: stretch;
    }
  }
</style>